#lang racket

(require rackunit)

;; Require your program module with renaming to avoid conflicts
(require (rename-in "Program-3.rkt"
                    
#| Renames 'check' to 'program-check' or another suitable name |#
                    [check program-check]))  

(module+ test
  ;; Define all your unit tests here
  (define (test-account-parsing)
    ;; Assuming you have a function to parse account data
    (check-equal? (reading_accounts_data '("123456789012" "John Doe" "500.00"))
                  (user 123456789012 "John Doe" 500.00)
                  "Test parsing valid account data"))

  (define (test-transaction-parsing)
    ;; Test parsing different types of transactions
    (check-equal? (reading_transaction_data '("Purchase" "123456789012" "20200101" "Store" "100.00"))
                  (purchase "Purchase" 123456789012 20200101 "Store" 100.00)
                  "Test parsing purchase transaction"))

  (define (test-payment-calculation)
    ;; Test the calculation of payments
    (let* ([test-transactions (list (cash "Payment"
                                    123456789012
                                    20200101
                                    "Cash"
                                    150.00)
                              (check "Payment"
                                     123456789012
                                     20200102
                                     "Check"
                                     11101
                                     200.00)
                              (credit "Payment"
                                      123456789012
                                      20200103
                                      "Credit"
                                      5500550055005500
                                      250.00))]
      ;; Filter transactions by account number 123456789012
         [filtered-transactions (filter-by-account test-transactions 123456789012)])
    (check-equal? (sum-payments filtered-transactions) 600.00
                  "Payments should be calculated correctly")))

  (define (test-purchase-calculation)
    ;; Test the calculation of purchases
    (let ([transactions (list (purchase "Purchase" 123456789012 20200101 "Store" 100.00)
                              (purchase "Purchase" 123456789012 20200102 "Online" 200.00))])
      (check-equal? (sum-purchases transactions) 300.00
                    "Purchases should be calculated correctly")))

  ;; Run the tests
  (test-account-parsing)
  (test-transaction-parsing)
  (test-payment-calculation)
  (test-purchase-calculation)
)